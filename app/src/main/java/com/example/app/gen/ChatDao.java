package com.example.app.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.app.Sqlentity.Chat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT".
*/
public class ChatDao extends AbstractDao<Chat, Long> {

    public static final String TABLENAME = "CHAT";

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Conversation = new Property(1, String.class, "conversation", false, "CONVERSATION");
        public final static Property SendId = new Property(2, Long.class, "sendId", false, "SEND_ID");
        public final static Property Sendname = new Property(3, String.class, "sendname", false, "SENDNAME");
        public final static Property Sendsrc = new Property(4, String.class, "sendsrc", false, "SENDSRC");
        public final static Property Data = new Property(5, Long.class, "data", false, "DATA");
        public final static Property Txt = new Property(6, String.class, "txt", false, "TXT");
        public final static Property State = new Property(7, int.class, "state", false, "STATE");
    }


    public ChatDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CONVERSATION\" TEXT," + // 1: conversation
                "\"SEND_ID\" INTEGER," + // 2: sendId
                "\"SENDNAME\" TEXT," + // 3: sendname
                "\"SENDSRC\" TEXT," + // 4: sendsrc
                "\"DATA\" INTEGER," + // 5: data
                "\"TXT\" TEXT," + // 6: txt
                "\"STATE\" INTEGER NOT NULL );"); // 7: state
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_CHAT__id ON \"CHAT\"" +
                " (\"_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conversation = entity.getConversation();
        if (conversation != null) {
            stmt.bindString(2, conversation);
        }
 
        Long sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindLong(3, sendId);
        }
 
        String sendname = entity.getSendname();
        if (sendname != null) {
            stmt.bindString(4, sendname);
        }
 
        String sendsrc = entity.getSendsrc();
        if (sendsrc != null) {
            stmt.bindString(5, sendsrc);
        }
 
        Long data = entity.getData();
        if (data != null) {
            stmt.bindLong(6, data);
        }
 
        String txt = entity.getTxt();
        if (txt != null) {
            stmt.bindString(7, txt);
        }
        stmt.bindLong(8, entity.getState());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conversation = entity.getConversation();
        if (conversation != null) {
            stmt.bindString(2, conversation);
        }
 
        Long sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindLong(3, sendId);
        }
 
        String sendname = entity.getSendname();
        if (sendname != null) {
            stmt.bindString(4, sendname);
        }
 
        String sendsrc = entity.getSendsrc();
        if (sendsrc != null) {
            stmt.bindString(5, sendsrc);
        }
 
        Long data = entity.getData();
        if (data != null) {
            stmt.bindLong(6, data);
        }
 
        String txt = entity.getTxt();
        if (txt != null) {
            stmt.bindString(7, txt);
        }
        stmt.bindLong(8, entity.getState());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chat readEntity(Cursor cursor, int offset) {
        Chat entity = new Chat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // conversation
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sendname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sendsrc
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // data
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // txt
            cursor.getInt(offset + 7) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConversation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSendId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSendname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSendsrc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setData(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTxt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setState(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
